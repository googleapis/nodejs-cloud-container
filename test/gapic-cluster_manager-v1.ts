// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protosTypes from '../protos/protos';
import * as assert from 'assert';
import {describe, it} from 'mocha';
const clustermanagerModule = require('../src');

const FAKE_STATUS_CODE = 1;
class FakeError {
  name: string;
  message: string;
  code: number;
  constructor(n: number) {
    this.name = 'fakeName';
    this.message = 'fake message';
    this.code = n;
  }
}
const error = new FakeError(FAKE_STATUS_CODE);
export interface Callback {
  (err: FakeError | null, response?: {} | null): void;
}

export class Operation {
  constructor() {}
  promise() {}
}
function mockSimpleGrpcMethod(
  expectedRequest: {},
  response: {} | null,
  error: FakeError | null
) {
  return (actualRequest: {}, options: {}, callback: Callback) => {
    assert.deepStrictEqual(actualRequest, expectedRequest);
    if (error) {
      callback(error);
    } else if (response) {
      callback(null, response);
    } else {
      callback(null);
    }
  };
}
describe('v1.ClusterManagerClient', () => {
  it('has servicePath', () => {
    const servicePath =
      clustermanagerModule.v1.ClusterManagerClient.servicePath;
    assert(servicePath);
  });
  it('has apiEndpoint', () => {
    const apiEndpoint =
      clustermanagerModule.v1.ClusterManagerClient.apiEndpoint;
    assert(apiEndpoint);
  });
  it('has port', () => {
    const port = clustermanagerModule.v1.ClusterManagerClient.port;
    assert(port);
    assert(typeof port === 'number');
  });
  it('should create a client with no option', () => {
    const client = new clustermanagerModule.v1.ClusterManagerClient();
    assert(client);
  });
  it('should create a client with gRPC fallback', () => {
    const client = new clustermanagerModule.v1.ClusterManagerClient({
      fallback: true,
    });
    assert(client);
  });
  describe('listClusters', () => {
    it('invokes listClusters without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IListClustersRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.listClusters = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.listClusters(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes listClusters with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IListClustersRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.listClusters = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.listClusters(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('getCluster', () => {
    it('invokes getCluster without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IGetClusterRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getCluster = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.getCluster(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getCluster with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IGetClusterRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getCluster = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.getCluster(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('createCluster', () => {
    it('invokes createCluster without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ICreateClusterRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createCluster = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.createCluster(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createCluster with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ICreateClusterRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createCluster = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.createCluster(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('updateCluster', () => {
    it('invokes updateCluster without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IUpdateClusterRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateCluster = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.updateCluster(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes updateCluster with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IUpdateClusterRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateCluster = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.updateCluster(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('updateNodePool', () => {
    it('invokes updateNodePool without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IUpdateNodePoolRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateNodePool = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.updateNodePool(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes updateNodePool with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IUpdateNodePoolRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateNodePool = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.updateNodePool(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('setNodePoolAutoscaling', () => {
    it('invokes setNodePoolAutoscaling without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetNodePoolAutoscalingRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setNodePoolAutoscaling = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.setNodePoolAutoscaling(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes setNodePoolAutoscaling with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetNodePoolAutoscalingRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setNodePoolAutoscaling = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.setNodePoolAutoscaling(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('setLoggingService', () => {
    it('invokes setLoggingService without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetLoggingServiceRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setLoggingService = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.setLoggingService(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes setLoggingService with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetLoggingServiceRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setLoggingService = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.setLoggingService(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('setMonitoringService', () => {
    it('invokes setMonitoringService without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetMonitoringServiceRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setMonitoringService = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.setMonitoringService(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes setMonitoringService with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetMonitoringServiceRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setMonitoringService = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.setMonitoringService(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('setAddonsConfig', () => {
    it('invokes setAddonsConfig without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetAddonsConfigRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setAddonsConfig = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.setAddonsConfig(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes setAddonsConfig with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetAddonsConfigRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setAddonsConfig = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.setAddonsConfig(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('setLocations', () => {
    it('invokes setLocations without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetLocationsRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setLocations = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.setLocations(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes setLocations with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetLocationsRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setLocations = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.setLocations(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('updateMaster', () => {
    it('invokes updateMaster without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IUpdateMasterRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateMaster = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.updateMaster(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes updateMaster with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IUpdateMasterRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateMaster = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.updateMaster(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('setMasterAuth', () => {
    it('invokes setMasterAuth without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetMasterAuthRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setMasterAuth = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.setMasterAuth(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes setMasterAuth with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetMasterAuthRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setMasterAuth = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.setMasterAuth(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('deleteCluster', () => {
    it('invokes deleteCluster without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IDeleteClusterRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.deleteCluster = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.deleteCluster(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes deleteCluster with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IDeleteClusterRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.deleteCluster = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.deleteCluster(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('listOperations', () => {
    it('invokes listOperations without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IListOperationsRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.listOperations = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.listOperations(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes listOperations with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IListOperationsRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.listOperations = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.listOperations(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IGetOperationRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getOperation = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.getOperation(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getOperation with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IGetOperationRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getOperation = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.getOperation(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ICancelOperationRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.cancelOperation = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.cancelOperation(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes cancelOperation with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ICancelOperationRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.cancelOperation = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.cancelOperation(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('getServerConfig', () => {
    it('invokes getServerConfig without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IGetServerConfigRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getServerConfig = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.getServerConfig(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getServerConfig with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IGetServerConfigRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getServerConfig = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.getServerConfig(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('listNodePools', () => {
    it('invokes listNodePools without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IListNodePoolsRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.listNodePools = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.listNodePools(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes listNodePools with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IListNodePoolsRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.listNodePools = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.listNodePools(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('getNodePool', () => {
    it('invokes getNodePool without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IGetNodePoolRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getNodePool = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.getNodePool(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getNodePool with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IGetNodePoolRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getNodePool = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.getNodePool(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('createNodePool', () => {
    it('invokes createNodePool without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ICreateNodePoolRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createNodePool = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.createNodePool(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createNodePool with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ICreateNodePoolRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createNodePool = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.createNodePool(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('deleteNodePool', () => {
    it('invokes deleteNodePool without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IDeleteNodePoolRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.deleteNodePool = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.deleteNodePool(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes deleteNodePool with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IDeleteNodePoolRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.deleteNodePool = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.deleteNodePool(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('rollbackNodePoolUpgrade', () => {
    it('invokes rollbackNodePoolUpgrade without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IRollbackNodePoolUpgradeRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.rollbackNodePoolUpgrade = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.rollbackNodePoolUpgrade(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes rollbackNodePoolUpgrade with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IRollbackNodePoolUpgradeRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.rollbackNodePoolUpgrade = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.rollbackNodePoolUpgrade(
        request,
        (err: FakeError, response: {}) => {
          assert(err instanceof FakeError);
          assert.strictEqual(err.code, FAKE_STATUS_CODE);
          assert(typeof response === 'undefined');
          done();
        }
      );
    });
  });
  describe('setNodePoolManagement', () => {
    it('invokes setNodePoolManagement without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetNodePoolManagementRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setNodePoolManagement = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.setNodePoolManagement(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes setNodePoolManagement with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetNodePoolManagementRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setNodePoolManagement = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.setNodePoolManagement(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('setLabels', () => {
    it('invokes setLabels without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetLabelsRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setLabels = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.setLabels(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes setLabels with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetLabelsRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setLabels = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.setLabels(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('setLegacyAbac', () => {
    it('invokes setLegacyAbac without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetLegacyAbacRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setLegacyAbac = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.setLegacyAbac(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes setLegacyAbac with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetLegacyAbacRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setLegacyAbac = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.setLegacyAbac(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('startIPRotation', () => {
    it('invokes startIPRotation without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IStartIPRotationRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.startIPRotation = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.startIPRotation(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes startIPRotation with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IStartIPRotationRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.startIPRotation = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.startIPRotation(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('completeIPRotation', () => {
    it('invokes completeIPRotation without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ICompleteIPRotationRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.completeIPRotation = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.completeIPRotation(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes completeIPRotation with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ICompleteIPRotationRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.completeIPRotation = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.completeIPRotation(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('setNodePoolSize', () => {
    it('invokes setNodePoolSize without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetNodePoolSizeRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setNodePoolSize = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.setNodePoolSize(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes setNodePoolSize with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetNodePoolSizeRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setNodePoolSize = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.setNodePoolSize(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('setNetworkPolicy', () => {
    it('invokes setNetworkPolicy without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetNetworkPolicyRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setNetworkPolicy = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.setNetworkPolicy(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes setNetworkPolicy with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetNetworkPolicyRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setNetworkPolicy = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.setNetworkPolicy(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('setMaintenancePolicy', () => {
    it('invokes setMaintenancePolicy without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetMaintenancePolicyRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setMaintenancePolicy = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.setMaintenancePolicy(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes setMaintenancePolicy with error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.ISetMaintenancePolicyRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.setMaintenancePolicy = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.setMaintenancePolicy(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('listUsableSubnetworks', () => {
    it('invokes listUsableSubnetworks without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IListUsableSubnetworksRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock Grpc layer
      client._innerApiCalls.listUsableSubnetworks = (
        actualRequest: {},
        options: {},
        callback: Callback
      ) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse);
      };
      client.listUsableSubnetworks(request, (err: FakeError, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });
  });
  describe('listUsableSubnetworksStream', () => {
    it('invokes listUsableSubnetworksStream without error', done => {
      const client = new clustermanagerModule.v1.ClusterManagerClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      // Mock request
      const request: protosTypes.google.container.v1.IListUsableSubnetworksRequest = {};
      // Mock response
      const expectedResponse = {};
      // Mock Grpc layer
      client._innerApiCalls.listUsableSubnetworks = (
        actualRequest: {},
        options: {},
        callback: Callback
      ) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse);
      };
      const stream = client
        .listUsableSubnetworksStream(request, {})
        .on('data', (response: {}) => {
          assert.deepStrictEqual(response, expectedResponse);
          done();
        })
        .on('error', (err: FakeError) => {
          done(err);
        });
      stream.write(request);
    });
  });
});
