// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as clustermanagerModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.ClusterManagerClient', () => {
    it('has servicePath', () => {
        const servicePath = clustermanagerModule.v1.ClusterManagerClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = clustermanagerModule.v1.ClusterManagerClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = clustermanagerModule.v1.ClusterManagerClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new clustermanagerModule.v1.ClusterManagerClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new clustermanagerModule.v1.ClusterManagerClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new clustermanagerModule.v1.ClusterManagerClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.clusterManagerStub, undefined);
        await client.initialize();
        assert(client.clusterManagerStub);
    });

    it('has close method', () => {
        const client = new clustermanagerModule.v1.ClusterManagerClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new clustermanagerModule.v1.ClusterManagerClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new clustermanagerModule.v1.ClusterManagerClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('listClusters', () => {
        it('invokes listClusters without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListClustersRequest());
            request.parent = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "parent=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.ListClustersResponse());
            client.innerApiCalls.listClusters = stubSimpleCall(expectedResponse);
            const [response] = await client.listClusters(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listClusters as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listClusters without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListClustersRequest());
            request.parent = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "parent=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.ListClustersResponse());
            client.innerApiCalls.listClusters = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listClusters(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IListClustersResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listClusters as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listClusters with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListClustersRequest());
            request.parent = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "parent=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listClusters = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listClusters(request), expectedError);
            assert((client.innerApiCalls.listClusters as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getCluster', () => {
        it('invokes getCluster without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.GetClusterRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Cluster());
            client.innerApiCalls.getCluster = stubSimpleCall(expectedResponse);
            const [response] = await client.getCluster(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getCluster without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.GetClusterRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Cluster());
            client.innerApiCalls.getCluster = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCluster(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.ICluster|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getCluster with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.GetClusterRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getCluster = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCluster(request), expectedError);
            assert((client.innerApiCalls.getCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createCluster', () => {
        it('invokes createCluster without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.CreateClusterRequest());
            request.parent = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "parent=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.createCluster = stubSimpleCall(expectedResponse);
            const [response] = await client.createCluster(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createCluster without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.CreateClusterRequest());
            request.parent = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "parent=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.createCluster = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createCluster(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createCluster with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.CreateClusterRequest());
            request.parent = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "parent=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createCluster = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createCluster(request), expectedError);
            assert((client.innerApiCalls.createCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateCluster', () => {
        it('invokes updateCluster without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.UpdateClusterRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.updateCluster = stubSimpleCall(expectedResponse);
            const [response] = await client.updateCluster(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCluster without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.UpdateClusterRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.updateCluster = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateCluster(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateCluster with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.UpdateClusterRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCluster = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateCluster(request), expectedError);
            assert((client.innerApiCalls.updateCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateNodePool', () => {
        it('invokes updateNodePool without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.UpdateNodePoolRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.updateNodePool = stubSimpleCall(expectedResponse);
            const [response] = await client.updateNodePool(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateNodePool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateNodePool without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.UpdateNodePoolRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.updateNodePool = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateNodePool(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateNodePool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateNodePool with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.UpdateNodePoolRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateNodePool = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateNodePool(request), expectedError);
            assert((client.innerApiCalls.updateNodePool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setNodePoolAutoscaling', () => {
        it('invokes setNodePoolAutoscaling without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetNodePoolAutoscalingRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setNodePoolAutoscaling = stubSimpleCall(expectedResponse);
            const [response] = await client.setNodePoolAutoscaling(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setNodePoolAutoscaling as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setNodePoolAutoscaling without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetNodePoolAutoscalingRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setNodePoolAutoscaling = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setNodePoolAutoscaling(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setNodePoolAutoscaling as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setNodePoolAutoscaling with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetNodePoolAutoscalingRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setNodePoolAutoscaling = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setNodePoolAutoscaling(request), expectedError);
            assert((client.innerApiCalls.setNodePoolAutoscaling as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setLoggingService', () => {
        it('invokes setLoggingService without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetLoggingServiceRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setLoggingService = stubSimpleCall(expectedResponse);
            const [response] = await client.setLoggingService(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setLoggingService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setLoggingService without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetLoggingServiceRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setLoggingService = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setLoggingService(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setLoggingService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setLoggingService with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetLoggingServiceRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setLoggingService = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setLoggingService(request), expectedError);
            assert((client.innerApiCalls.setLoggingService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setMonitoringService', () => {
        it('invokes setMonitoringService without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetMonitoringServiceRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setMonitoringService = stubSimpleCall(expectedResponse);
            const [response] = await client.setMonitoringService(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setMonitoringService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setMonitoringService without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetMonitoringServiceRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setMonitoringService = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setMonitoringService(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setMonitoringService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setMonitoringService with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetMonitoringServiceRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setMonitoringService = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setMonitoringService(request), expectedError);
            assert((client.innerApiCalls.setMonitoringService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setAddonsConfig', () => {
        it('invokes setAddonsConfig without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetAddonsConfigRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setAddonsConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.setAddonsConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setAddonsConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setAddonsConfig without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetAddonsConfigRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setAddonsConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setAddonsConfig(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setAddonsConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setAddonsConfig with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetAddonsConfigRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setAddonsConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setAddonsConfig(request), expectedError);
            assert((client.innerApiCalls.setAddonsConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setLocations', () => {
        it('invokes setLocations without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetLocationsRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setLocations = stubSimpleCall(expectedResponse);
            const [response] = await client.setLocations(request);
            assert(stub.calledOnce);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setLocations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setLocations without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetLocationsRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setLocations = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setLocations(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert(stub.calledOnce);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setLocations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setLocations with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetLocationsRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setLocations = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setLocations(request), expectedError);
            assert(stub.calledOnce);
            assert((client.innerApiCalls.setLocations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateMaster', () => {
        it('invokes updateMaster without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.UpdateMasterRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.updateMaster = stubSimpleCall(expectedResponse);
            const [response] = await client.updateMaster(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateMaster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateMaster without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.UpdateMasterRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.updateMaster = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateMaster(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateMaster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateMaster with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.UpdateMasterRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateMaster = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateMaster(request), expectedError);
            assert((client.innerApiCalls.updateMaster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setMasterAuth', () => {
        it('invokes setMasterAuth without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetMasterAuthRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setMasterAuth = stubSimpleCall(expectedResponse);
            const [response] = await client.setMasterAuth(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setMasterAuth as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setMasterAuth without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetMasterAuthRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setMasterAuth = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setMasterAuth(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setMasterAuth as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setMasterAuth with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetMasterAuthRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setMasterAuth = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setMasterAuth(request), expectedError);
            assert((client.innerApiCalls.setMasterAuth as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteCluster', () => {
        it('invokes deleteCluster without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.DeleteClusterRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.deleteCluster = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteCluster(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteCluster without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.DeleteClusterRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.deleteCluster = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteCluster(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteCluster with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.DeleteClusterRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteCluster = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteCluster(request), expectedError);
            assert((client.innerApiCalls.deleteCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listOperations', () => {
        it('invokes listOperations without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListOperationsRequest());
            request.parent = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "parent=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.ListOperationsResponse());
            client.innerApiCalls.listOperations = stubSimpleCall(expectedResponse);
            const [response] = await client.listOperations(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listOperations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listOperations without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListOperationsRequest());
            request.parent = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "parent=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.ListOperationsResponse());
            client.innerApiCalls.listOperations = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listOperations(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IListOperationsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listOperations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listOperations with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListOperationsRequest());
            request.parent = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "parent=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listOperations = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listOperations(request), expectedError);
            assert((client.innerApiCalls.listOperations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getOperation', () => {
        it('invokes getOperation without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.GetOperationRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.getOperation = stubSimpleCall(expectedResponse);
            const [response] = await client.getOperation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getOperation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getOperation without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.GetOperationRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.getOperation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getOperation(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getOperation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getOperation with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.GetOperationRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getOperation(request), expectedError);
            assert((client.innerApiCalls.getOperation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('cancelOperation', () => {
        it('invokes cancelOperation without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.CancelOperationRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.cancelOperation = stubSimpleCall(expectedResponse);
            const [response] = await client.cancelOperation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.cancelOperation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes cancelOperation without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.CancelOperationRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.cancelOperation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.cancelOperation(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.cancelOperation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes cancelOperation with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.CancelOperationRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.cancelOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.cancelOperation(request), expectedError);
            assert((client.innerApiCalls.cancelOperation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getServerConfig', () => {
        it('invokes getServerConfig without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.GetServerConfigRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.ServerConfig());
            client.innerApiCalls.getServerConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.getServerConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getServerConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getServerConfig without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.GetServerConfigRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.ServerConfig());
            client.innerApiCalls.getServerConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getServerConfig(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IServerConfig|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getServerConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getServerConfig with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.GetServerConfigRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getServerConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getServerConfig(request), expectedError);
            assert((client.innerApiCalls.getServerConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getJSONWebKeys', () => {
        it('invokes getJSONWebKeys without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.GetJSONWebKeysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.GetJSONWebKeysResponse());
            client.innerApiCalls.getJSONWebKeys = stubSimpleCall(expectedResponse);
            const [response] = await client.getJSONWebKeys(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getJSONWebKeys as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getJSONWebKeys without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.GetJSONWebKeysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.GetJSONWebKeysResponse());
            client.innerApiCalls.getJSONWebKeys = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getJSONWebKeys(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IGetJSONWebKeysResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getJSONWebKeys as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getJSONWebKeys with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.GetJSONWebKeysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getJSONWebKeys = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getJSONWebKeys(request), expectedError);
            assert((client.innerApiCalls.getJSONWebKeys as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listNodePools', () => {
        it('invokes listNodePools without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListNodePoolsRequest());
            request.parent = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "parent=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.ListNodePoolsResponse());
            client.innerApiCalls.listNodePools = stubSimpleCall(expectedResponse);
            const [response] = await client.listNodePools(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listNodePools as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listNodePools without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListNodePoolsRequest());
            request.parent = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "parent=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.ListNodePoolsResponse());
            client.innerApiCalls.listNodePools = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listNodePools(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IListNodePoolsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listNodePools as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listNodePools with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListNodePoolsRequest());
            request.parent = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "parent=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listNodePools = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listNodePools(request), expectedError);
            assert((client.innerApiCalls.listNodePools as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getNodePool', () => {
        it('invokes getNodePool without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.GetNodePoolRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.NodePool());
            client.innerApiCalls.getNodePool = stubSimpleCall(expectedResponse);
            const [response] = await client.getNodePool(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getNodePool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getNodePool without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.GetNodePoolRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.NodePool());
            client.innerApiCalls.getNodePool = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getNodePool(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.INodePool|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getNodePool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getNodePool with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.GetNodePoolRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getNodePool = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getNodePool(request), expectedError);
            assert((client.innerApiCalls.getNodePool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createNodePool', () => {
        it('invokes createNodePool without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.CreateNodePoolRequest());
            request.parent = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "parent=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.createNodePool = stubSimpleCall(expectedResponse);
            const [response] = await client.createNodePool(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createNodePool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createNodePool without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.CreateNodePoolRequest());
            request.parent = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "parent=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.createNodePool = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createNodePool(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createNodePool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createNodePool with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.CreateNodePoolRequest());
            request.parent = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "parent=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createNodePool = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createNodePool(request), expectedError);
            assert((client.innerApiCalls.createNodePool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteNodePool', () => {
        it('invokes deleteNodePool without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.DeleteNodePoolRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.deleteNodePool = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteNodePool(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteNodePool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteNodePool without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.DeleteNodePoolRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.deleteNodePool = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteNodePool(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteNodePool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteNodePool with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.DeleteNodePoolRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteNodePool = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteNodePool(request), expectedError);
            assert((client.innerApiCalls.deleteNodePool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('rollbackNodePoolUpgrade', () => {
        it('invokes rollbackNodePoolUpgrade without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.RollbackNodePoolUpgradeRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.rollbackNodePoolUpgrade = stubSimpleCall(expectedResponse);
            const [response] = await client.rollbackNodePoolUpgrade(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.rollbackNodePoolUpgrade as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes rollbackNodePoolUpgrade without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.RollbackNodePoolUpgradeRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.rollbackNodePoolUpgrade = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.rollbackNodePoolUpgrade(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.rollbackNodePoolUpgrade as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes rollbackNodePoolUpgrade with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.RollbackNodePoolUpgradeRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.rollbackNodePoolUpgrade = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.rollbackNodePoolUpgrade(request), expectedError);
            assert((client.innerApiCalls.rollbackNodePoolUpgrade as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setNodePoolManagement', () => {
        it('invokes setNodePoolManagement without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetNodePoolManagementRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setNodePoolManagement = stubSimpleCall(expectedResponse);
            const [response] = await client.setNodePoolManagement(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setNodePoolManagement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setNodePoolManagement without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetNodePoolManagementRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setNodePoolManagement = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setNodePoolManagement(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setNodePoolManagement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setNodePoolManagement with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetNodePoolManagementRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setNodePoolManagement = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setNodePoolManagement(request), expectedError);
            assert((client.innerApiCalls.setNodePoolManagement as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setLabels', () => {
        it('invokes setLabels without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetLabelsRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setLabels = stubSimpleCall(expectedResponse);
            const [response] = await client.setLabels(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setLabels as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setLabels without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetLabelsRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setLabels = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setLabels(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setLabels as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setLabels with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetLabelsRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setLabels = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setLabels(request), expectedError);
            assert((client.innerApiCalls.setLabels as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setLegacyAbac', () => {
        it('invokes setLegacyAbac without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetLegacyAbacRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setLegacyAbac = stubSimpleCall(expectedResponse);
            const [response] = await client.setLegacyAbac(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setLegacyAbac as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setLegacyAbac without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetLegacyAbacRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setLegacyAbac = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setLegacyAbac(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setLegacyAbac as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setLegacyAbac with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetLegacyAbacRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setLegacyAbac = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setLegacyAbac(request), expectedError);
            assert((client.innerApiCalls.setLegacyAbac as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('startIPRotation', () => {
        it('invokes startIPRotation without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.StartIPRotationRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.startIPRotation = stubSimpleCall(expectedResponse);
            const [response] = await client.startIPRotation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.startIPRotation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes startIPRotation without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.StartIPRotationRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.startIPRotation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.startIPRotation(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.startIPRotation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes startIPRotation with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.StartIPRotationRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.startIPRotation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.startIPRotation(request), expectedError);
            assert((client.innerApiCalls.startIPRotation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('completeIPRotation', () => {
        it('invokes completeIPRotation without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.CompleteIPRotationRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.completeIPRotation = stubSimpleCall(expectedResponse);
            const [response] = await client.completeIPRotation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.completeIPRotation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes completeIPRotation without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.CompleteIPRotationRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.completeIPRotation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.completeIPRotation(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.completeIPRotation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes completeIPRotation with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.CompleteIPRotationRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.completeIPRotation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.completeIPRotation(request), expectedError);
            assert((client.innerApiCalls.completeIPRotation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setNodePoolSize', () => {
        it('invokes setNodePoolSize without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetNodePoolSizeRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setNodePoolSize = stubSimpleCall(expectedResponse);
            const [response] = await client.setNodePoolSize(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setNodePoolSize as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setNodePoolSize without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetNodePoolSizeRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setNodePoolSize = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setNodePoolSize(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setNodePoolSize as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setNodePoolSize with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetNodePoolSizeRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setNodePoolSize = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setNodePoolSize(request), expectedError);
            assert((client.innerApiCalls.setNodePoolSize as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setNetworkPolicy', () => {
        it('invokes setNetworkPolicy without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetNetworkPolicyRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setNetworkPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.setNetworkPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setNetworkPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setNetworkPolicy without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetNetworkPolicyRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setNetworkPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setNetworkPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setNetworkPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setNetworkPolicy with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetNetworkPolicyRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setNetworkPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setNetworkPolicy(request), expectedError);
            assert((client.innerApiCalls.setNetworkPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setMaintenancePolicy', () => {
        it('invokes setMaintenancePolicy without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetMaintenancePolicyRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setMaintenancePolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.setMaintenancePolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setMaintenancePolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setMaintenancePolicy without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetMaintenancePolicyRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.container.v1.Operation());
            client.innerApiCalls.setMaintenancePolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setMaintenancePolicy(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setMaintenancePolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setMaintenancePolicy with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.SetMaintenancePolicyRequest());
            request.name = '';
            request.projectId = '';
            const expectedHeaderRequestParams = "name=&project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setMaintenancePolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setMaintenancePolicy(request), expectedError);
            assert((client.innerApiCalls.setMaintenancePolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listUsableSubnetworks', () => {
        it('invokes listUsableSubnetworks without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListUsableSubnetworksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.container.v1.UsableSubnetwork()),
              generateSampleMessage(new protos.google.container.v1.UsableSubnetwork()),
              generateSampleMessage(new protos.google.container.v1.UsableSubnetwork()),
            ];
            client.innerApiCalls.listUsableSubnetworks = stubSimpleCall(expectedResponse);
            const [response] = await client.listUsableSubnetworks(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listUsableSubnetworks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listUsableSubnetworks without error using callback', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListUsableSubnetworksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.container.v1.UsableSubnetwork()),
              generateSampleMessage(new protos.google.container.v1.UsableSubnetwork()),
              generateSampleMessage(new protos.google.container.v1.UsableSubnetwork()),
            ];
            client.innerApiCalls.listUsableSubnetworks = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listUsableSubnetworks(
                    request,
                    (err?: Error|null, result?: protos.google.container.v1.IUsableSubnetwork[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listUsableSubnetworks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listUsableSubnetworks with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListUsableSubnetworksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listUsableSubnetworks = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listUsableSubnetworks(request), expectedError);
            assert((client.innerApiCalls.listUsableSubnetworks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listUsableSubnetworksStream without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListUsableSubnetworksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.container.v1.UsableSubnetwork()),
              generateSampleMessage(new protos.google.container.v1.UsableSubnetwork()),
              generateSampleMessage(new protos.google.container.v1.UsableSubnetwork()),
            ];
            client.descriptors.page.listUsableSubnetworks.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listUsableSubnetworksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.container.v1.UsableSubnetwork[] = [];
                stream.on('data', (response: protos.google.container.v1.UsableSubnetwork) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listUsableSubnetworks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listUsableSubnetworks, request));
            assert.strictEqual(
                (client.descriptors.page.listUsableSubnetworks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listUsableSubnetworksStream with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListUsableSubnetworksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listUsableSubnetworks.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listUsableSubnetworksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.container.v1.UsableSubnetwork[] = [];
                stream.on('data', (response: protos.google.container.v1.UsableSubnetwork) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listUsableSubnetworks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listUsableSubnetworks, request));
            assert.strictEqual(
                (client.descriptors.page.listUsableSubnetworks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listUsableSubnetworks without error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListUsableSubnetworksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.container.v1.UsableSubnetwork()),
              generateSampleMessage(new protos.google.container.v1.UsableSubnetwork()),
              generateSampleMessage(new protos.google.container.v1.UsableSubnetwork()),
            ];
            client.descriptors.page.listUsableSubnetworks.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.container.v1.IUsableSubnetwork[] = [];
            const iterable = client.listUsableSubnetworksAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listUsableSubnetworks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listUsableSubnetworks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listUsableSubnetworks with error', async () => {
            const client = new clustermanagerModule.v1.ClusterManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.container.v1.ListUsableSubnetworksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listUsableSubnetworks.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listUsableSubnetworksAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.container.v1.IUsableSubnetwork[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listUsableSubnetworks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listUsableSubnetworks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });
});
