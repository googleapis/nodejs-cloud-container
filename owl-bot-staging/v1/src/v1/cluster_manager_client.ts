// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/cluster_manager_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './cluster_manager_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Google Kubernetes Engine Cluster Manager v1
 * @class
 * @memberof v1
 */
export class ClusterManagerClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  clusterManagerStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ClusterManagerClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ClusterManagerClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listUsableSubnetworks:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'subnetworks')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.container.v1.ClusterManager', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.clusterManagerStub) {
      return this.clusterManagerStub;
    }

    // Put together the "service stub" for
    // google.container.v1.ClusterManager.
    this.clusterManagerStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.container.v1.ClusterManager') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.container.v1.ClusterManager,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const clusterManagerStubMethods =
        ['listClusters', 'getCluster', 'createCluster', 'updateCluster', 'updateNodePool', 'setNodePoolAutoscaling', 'setLoggingService', 'setMonitoringService', 'setAddonsConfig', 'setLocations', 'updateMaster', 'setMasterAuth', 'deleteCluster', 'listOperations', 'getOperation', 'cancelOperation', 'getServerConfig', 'getJSONWebKeys', 'listNodePools', 'getNodePool', 'createNodePool', 'deleteNodePool', 'rollbackNodePoolUpgrade', 'setNodePoolManagement', 'setLabels', 'setLegacyAbac', 'startIPRotation', 'completeIPRotation', 'setNodePoolSize', 'setNetworkPolicy', 'setMaintenancePolicy', 'listUsableSubnetworks'];
    for (const methodName of clusterManagerStubMethods) {
      const callPromise = this.clusterManagerStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.clusterManagerStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'container.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'container.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  listClusters(
      request?: protos.google.container.v1.IListClustersRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IListClustersResponse,
        protos.google.container.v1.IListClustersRequest|undefined, {}|undefined
      ]>;
  listClusters(
      request: protos.google.container.v1.IListClustersRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IListClustersResponse,
          protos.google.container.v1.IListClustersRequest|null|undefined,
          {}|null|undefined>): void;
  listClusters(
      request: protos.google.container.v1.IListClustersRequest,
      callback: Callback<
          protos.google.container.v1.IListClustersResponse,
          protos.google.container.v1.IListClustersRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Lists all clusters owned by a project in either the specified zone or all
 * zones.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the parent field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides, or "-" for all zones. This field has been deprecated and
 *   replaced by the parent field.
 * @param {string} request.parent
 *   The parent (project and location) where the clusters will be listed.
 *   Specified in the format `projects/* /locations/*`.
 *   Location "-" matches all zones and all regions.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListClustersResponse]{@link google.container.v1.ListClustersResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.listClusters(request);
 */
  listClusters(
      request?: protos.google.container.v1.IListClustersRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IListClustersResponse,
          protos.google.container.v1.IListClustersRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IListClustersResponse,
          protos.google.container.v1.IListClustersRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IListClustersResponse,
        protos.google.container.v1.IListClustersRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.listClusters(request, options, callback);
  }
  getCluster(
      request?: protos.google.container.v1.IGetClusterRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.ICluster,
        protos.google.container.v1.IGetClusterRequest|undefined, {}|undefined
      ]>;
  getCluster(
      request: protos.google.container.v1.IGetClusterRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.ICluster,
          protos.google.container.v1.IGetClusterRequest|null|undefined,
          {}|null|undefined>): void;
  getCluster(
      request: protos.google.container.v1.IGetClusterRequest,
      callback: Callback<
          protos.google.container.v1.ICluster,
          protos.google.container.v1.IGetClusterRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets the details of a specific cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster to retrieve.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.name
 *   The name (project, location, cluster) of the cluster to retrieve.
 *   Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Cluster]{@link google.container.v1.Cluster}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getCluster(request);
 */
  getCluster(
      request?: protos.google.container.v1.IGetClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.ICluster,
          protos.google.container.v1.IGetClusterRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.ICluster,
          protos.google.container.v1.IGetClusterRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.ICluster,
        protos.google.container.v1.IGetClusterRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.getCluster(request, options, callback);
  }
  createCluster(
      request?: protos.google.container.v1.ICreateClusterRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ICreateClusterRequest|undefined, {}|undefined
      ]>;
  createCluster(
      request: protos.google.container.v1.ICreateClusterRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ICreateClusterRequest|null|undefined,
          {}|null|undefined>): void;
  createCluster(
      request: protos.google.container.v1.ICreateClusterRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ICreateClusterRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a cluster, consisting of the specified number and type of Google
 * Compute Engine instances.
 *
 * By default, the cluster is created in the project's
 * [default
 * network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks).
 *
 * One firewall is added for the cluster. After cluster creation,
 * the Kubelet creates routes for each node to allow the containers
 * on that node to communicate with all other instances in the
 * cluster.
 *
 * Finally, an entry is added to the project's global metadata indicating
 * which CIDR range the cluster is using.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the parent field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the parent
 *   field.
 * @param {google.container.v1.Cluster} request.cluster
 *   Required. A [cluster
 *   resource](https://cloud.google.com/container-engine/reference/rest/v1/projects.locations.clusters)
 * @param {string} request.parent
 *   The parent (project and location) where the cluster will be created.
 *   Specified in the format `projects/* /locations/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createCluster(request);
 */
  createCluster(
      request?: protos.google.container.v1.ICreateClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ICreateClusterRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ICreateClusterRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ICreateClusterRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.createCluster(request, options, callback);
  }
  updateCluster(
      request?: protos.google.container.v1.IUpdateClusterRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IUpdateClusterRequest|undefined, {}|undefined
      ]>;
  updateCluster(
      request: protos.google.container.v1.IUpdateClusterRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IUpdateClusterRequest|null|undefined,
          {}|null|undefined>): void;
  updateCluster(
      request: protos.google.container.v1.IUpdateClusterRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IUpdateClusterRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates the settings of a specific cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster to upgrade.
 *   This field has been deprecated and replaced by the name field.
 * @param {google.container.v1.ClusterUpdate} request.update
 *   Required. A description of the update.
 * @param {string} request.name
 *   The name (project, location, cluster) of the cluster to update.
 *   Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateCluster(request);
 */
  updateCluster(
      request?: protos.google.container.v1.IUpdateClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IUpdateClusterRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IUpdateClusterRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IUpdateClusterRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.updateCluster(request, options, callback);
  }
  updateNodePool(
      request?: protos.google.container.v1.IUpdateNodePoolRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IUpdateNodePoolRequest|undefined, {}|undefined
      ]>;
  updateNodePool(
      request: protos.google.container.v1.IUpdateNodePoolRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IUpdateNodePoolRequest|null|undefined,
          {}|null|undefined>): void;
  updateNodePool(
      request: protos.google.container.v1.IUpdateNodePoolRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IUpdateNodePoolRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates the version and/or image type for the specified node pool.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster to upgrade.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.nodePoolId
 *   Deprecated. The name of the node pool to upgrade.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.nodeVersion
 *   Required. The Kubernetes version to change the nodes to (typically an
 *   upgrade).
 *
 *   Users may specify either explicit versions offered by Kubernetes Engine or
 *   version aliases, which have the following behavior:
 *
 *   - "latest": picks the highest valid Kubernetes version
 *   - "1.X": picks the highest valid patch+gke.N patch in the 1.X version
 *   - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version
 *   - "1.X.Y-gke.N": picks an explicit Kubernetes version
 *   - "-": picks the Kubernetes master version
 * @param {string} request.imageType
 *   Required. The desired image type for the node pool.
 * @param {string} request.name
 *   The name (project, location, cluster, node pool) of the node pool to
 *   update. Specified in the format
 *   `projects/* /locations/* /clusters/* /nodePools/*`.
 * @param {string[]} request.locations
 *   The desired list of Google Compute Engine
 *   [zones](https://cloud.google.com/compute/docs/zones#available) in which the
 *   node pool's nodes should be located. Changing the locations for a node pool
 *   will result in nodes being either created or removed from the node pool,
 *   depending on whether locations are being added or removed.
 * @param {google.container.v1.WorkloadMetadataConfig} request.workloadMetadataConfig
 *   The desired workload metadata config for the node pool.
 * @param {google.container.v1.NodePool.UpgradeSettings} request.upgradeSettings
 *   Upgrade settings control disruption and speed of the upgrade.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateNodePool(request);
 */
  updateNodePool(
      request?: protos.google.container.v1.IUpdateNodePoolRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IUpdateNodePoolRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IUpdateNodePoolRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IUpdateNodePoolRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.updateNodePool(request, options, callback);
  }
  setNodePoolAutoscaling(
      request?: protos.google.container.v1.ISetNodePoolAutoscalingRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetNodePoolAutoscalingRequest|undefined, {}|undefined
      ]>;
  setNodePoolAutoscaling(
      request: protos.google.container.v1.ISetNodePoolAutoscalingRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNodePoolAutoscalingRequest|null|undefined,
          {}|null|undefined>): void;
  setNodePoolAutoscaling(
      request: protos.google.container.v1.ISetNodePoolAutoscalingRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNodePoolAutoscalingRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Sets the autoscaling settings for the specified node pool.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster to upgrade.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.nodePoolId
 *   Deprecated. The name of the node pool to upgrade.
 *   This field has been deprecated and replaced by the name field.
 * @param {google.container.v1.NodePoolAutoscaling} request.autoscaling
 *   Required. Autoscaling configuration for the node pool.
 * @param {string} request.name
 *   The name (project, location, cluster, node pool) of the node pool to set
 *   autoscaler settings. Specified in the format
 *   `projects/* /locations/* /clusters/* /nodePools/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.setNodePoolAutoscaling(request);
 */
  setNodePoolAutoscaling(
      request?: protos.google.container.v1.ISetNodePoolAutoscalingRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNodePoolAutoscalingRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNodePoolAutoscalingRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetNodePoolAutoscalingRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.setNodePoolAutoscaling(request, options, callback);
  }
  setLoggingService(
      request?: protos.google.container.v1.ISetLoggingServiceRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetLoggingServiceRequest|undefined, {}|undefined
      ]>;
  setLoggingService(
      request: protos.google.container.v1.ISetLoggingServiceRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLoggingServiceRequest|null|undefined,
          {}|null|undefined>): void;
  setLoggingService(
      request: protos.google.container.v1.ISetLoggingServiceRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLoggingServiceRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Sets the logging service for a specific cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster to upgrade.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.loggingService
 *   Required. The logging service the cluster should use to write logs.
 *   Currently available options:
 *
 *   * `logging.googleapis.com/kubernetes` - The Cloud Logging
 *   service with a Kubernetes-native resource model
 *   * `logging.googleapis.com` - The legacy Cloud Logging service (no longer
 *     available as of GKE 1.15).
 *   * `none` - no logs will be exported from the cluster.
 *
 *   If left as an empty string,`logging.googleapis.com/kubernetes` will be
 *   used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
 * @param {string} request.name
 *   The name (project, location, cluster) of the cluster to set logging.
 *   Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.setLoggingService(request);
 */
  setLoggingService(
      request?: protos.google.container.v1.ISetLoggingServiceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLoggingServiceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLoggingServiceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetLoggingServiceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.setLoggingService(request, options, callback);
  }
  setMonitoringService(
      request?: protos.google.container.v1.ISetMonitoringServiceRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetMonitoringServiceRequest|undefined, {}|undefined
      ]>;
  setMonitoringService(
      request: protos.google.container.v1.ISetMonitoringServiceRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetMonitoringServiceRequest|null|undefined,
          {}|null|undefined>): void;
  setMonitoringService(
      request: protos.google.container.v1.ISetMonitoringServiceRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetMonitoringServiceRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Sets the monitoring service for a specific cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster to upgrade.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.monitoringService
 *   Required. The monitoring service the cluster should use to write metrics.
 *   Currently available options:
 *
 *   * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring
 *   service with a Kubernetes-native resource model
 *   * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no
 *     longer available as of GKE 1.15).
 *   * `none` - No metrics will be exported from the cluster.
 *
 *   If left as an empty string,`monitoring.googleapis.com/kubernetes` will be
 *   used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
 * @param {string} request.name
 *   The name (project, location, cluster) of the cluster to set monitoring.
 *   Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.setMonitoringService(request);
 */
  setMonitoringService(
      request?: protos.google.container.v1.ISetMonitoringServiceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetMonitoringServiceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetMonitoringServiceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetMonitoringServiceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.setMonitoringService(request, options, callback);
  }
  setAddonsConfig(
      request?: protos.google.container.v1.ISetAddonsConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetAddonsConfigRequest|undefined, {}|undefined
      ]>;
  setAddonsConfig(
      request: protos.google.container.v1.ISetAddonsConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetAddonsConfigRequest|null|undefined,
          {}|null|undefined>): void;
  setAddonsConfig(
      request: protos.google.container.v1.ISetAddonsConfigRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetAddonsConfigRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Sets the addons for a specific cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster to upgrade.
 *   This field has been deprecated and replaced by the name field.
 * @param {google.container.v1.AddonsConfig} request.addonsConfig
 *   Required. The desired configurations for the various addons available to run in the
 *   cluster.
 * @param {string} request.name
 *   The name (project, location, cluster) of the cluster to set addons.
 *   Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.setAddonsConfig(request);
 */
  setAddonsConfig(
      request?: protos.google.container.v1.ISetAddonsConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetAddonsConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetAddonsConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetAddonsConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.setAddonsConfig(request, options, callback);
  }
  setLocations(
      request?: protos.google.container.v1.ISetLocationsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetLocationsRequest|undefined, {}|undefined
      ]>;
  setLocations(
      request: protos.google.container.v1.ISetLocationsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLocationsRequest|null|undefined,
          {}|null|undefined>): void;
  setLocations(
      request: protos.google.container.v1.ISetLocationsRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLocationsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Sets the locations for a specific cluster.
 * Deprecated. Use
 * [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/update)
 * instead.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster to upgrade.
 *   This field has been deprecated and replaced by the name field.
 * @param {string[]} request.locations
 *   Required. The desired list of Google Compute Engine
 *   [zones](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster's nodes should be located. Changing the locations a cluster is in
 *   will result in nodes being either created or removed from the cluster,
 *   depending on whether locations are being added or removed.
 *
 *   This list must always include the cluster's primary zone.
 * @param {string} request.name
 *   The name (project, location, cluster) of the cluster to set locations.
 *   Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.setLocations(request);
 * @deprecated SetLocations is deprecated and may be removed in a future version.
 */
  setLocations(
      request?: protos.google.container.v1.ISetLocationsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLocationsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLocationsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetLocationsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    gax.warn('DEP$ClusterManager-$SetLocations','SetLocations is deprecated and may be removed in a future version.', 'DeprecationWarning');
    return this.innerApiCalls.setLocations(request, options, callback);
  }
  updateMaster(
      request?: protos.google.container.v1.IUpdateMasterRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IUpdateMasterRequest|undefined, {}|undefined
      ]>;
  updateMaster(
      request: protos.google.container.v1.IUpdateMasterRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IUpdateMasterRequest|null|undefined,
          {}|null|undefined>): void;
  updateMaster(
      request: protos.google.container.v1.IUpdateMasterRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IUpdateMasterRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates the master for a specific cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster to upgrade.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.masterVersion
 *   Required. The Kubernetes version to change the master to.
 *
 *   Users may specify either explicit versions offered by Kubernetes Engine or
 *   version aliases, which have the following behavior:
 *
 *   - "latest": picks the highest valid Kubernetes version
 *   - "1.X": picks the highest valid patch+gke.N patch in the 1.X version
 *   - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version
 *   - "1.X.Y-gke.N": picks an explicit Kubernetes version
 *   - "-": picks the default Kubernetes version
 * @param {string} request.name
 *   The name (project, location, cluster) of the cluster to update.
 *   Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateMaster(request);
 */
  updateMaster(
      request?: protos.google.container.v1.IUpdateMasterRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IUpdateMasterRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IUpdateMasterRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IUpdateMasterRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.updateMaster(request, options, callback);
  }
  setMasterAuth(
      request?: protos.google.container.v1.ISetMasterAuthRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetMasterAuthRequest|undefined, {}|undefined
      ]>;
  setMasterAuth(
      request: protos.google.container.v1.ISetMasterAuthRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetMasterAuthRequest|null|undefined,
          {}|null|undefined>): void;
  setMasterAuth(
      request: protos.google.container.v1.ISetMasterAuthRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetMasterAuthRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Sets master auth materials. Currently supports changing the admin password
 * or a specific cluster, either via password generation or explicitly setting
 * the password.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster to upgrade.
 *   This field has been deprecated and replaced by the name field.
 * @param {google.container.v1.SetMasterAuthRequest.Action} request.action
 *   Required. The exact form of action to be taken on the master auth.
 * @param {google.container.v1.MasterAuth} request.update
 *   Required. A description of the update.
 * @param {string} request.name
 *   The name (project, location, cluster) of the cluster to set auth.
 *   Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.setMasterAuth(request);
 */
  setMasterAuth(
      request?: protos.google.container.v1.ISetMasterAuthRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetMasterAuthRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetMasterAuthRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetMasterAuthRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.setMasterAuth(request, options, callback);
  }
  deleteCluster(
      request?: protos.google.container.v1.IDeleteClusterRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IDeleteClusterRequest|undefined, {}|undefined
      ]>;
  deleteCluster(
      request: protos.google.container.v1.IDeleteClusterRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IDeleteClusterRequest|null|undefined,
          {}|null|undefined>): void;
  deleteCluster(
      request: protos.google.container.v1.IDeleteClusterRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IDeleteClusterRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes the cluster, including the Kubernetes endpoint and all worker
 * nodes.
 *
 * Firewalls and routes that were configured during cluster creation
 * are also deleted.
 *
 * Other Google Compute Engine resources that might be in use by the cluster,
 * such as load balancer resources, are not deleted if they weren't present
 * when the cluster was initially created.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster to delete.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.name
 *   The name (project, location, cluster) of the cluster to delete.
 *   Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteCluster(request);
 */
  deleteCluster(
      request?: protos.google.container.v1.IDeleteClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IDeleteClusterRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IDeleteClusterRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IDeleteClusterRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteCluster(request, options, callback);
  }
  listOperations(
      request?: protos.google.container.v1.IListOperationsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IListOperationsResponse,
        protos.google.container.v1.IListOperationsRequest|undefined, {}|undefined
      ]>;
  listOperations(
      request: protos.google.container.v1.IListOperationsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IListOperationsResponse,
          protos.google.container.v1.IListOperationsRequest|null|undefined,
          {}|null|undefined>): void;
  listOperations(
      request: protos.google.container.v1.IListOperationsRequest,
      callback: Callback<
          protos.google.container.v1.IListOperationsResponse,
          protos.google.container.v1.IListOperationsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Lists all operations in a project in a specific zone or all zones.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the parent field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) to return
 *   operations for, or `-` for all zones. This field has been deprecated and
 *   replaced by the parent field.
 * @param {string} request.parent
 *   The parent (project and location) where the operations will be listed.
 *   Specified in the format `projects/* /locations/*`.
 *   Location "-" matches all zones and all regions.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListOperationsResponse]{@link google.container.v1.ListOperationsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.listOperations(request);
 */
  listOperations(
      request?: protos.google.container.v1.IListOperationsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IListOperationsResponse,
          protos.google.container.v1.IListOperationsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IListOperationsResponse,
          protos.google.container.v1.IListOperationsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IListOperationsResponse,
        protos.google.container.v1.IListOperationsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.listOperations(request, options, callback);
  }
  getOperation(
      request?: protos.google.container.v1.IGetOperationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IGetOperationRequest|undefined, {}|undefined
      ]>;
  getOperation(
      request: protos.google.container.v1.IGetOperationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IGetOperationRequest|null|undefined,
          {}|null|undefined>): void;
  getOperation(
      request: protos.google.container.v1.IGetOperationRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IGetOperationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets the specified operation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.operationId
 *   Deprecated. The server-assigned `name` of the operation.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.name
 *   The name (project, location, operation id) of the operation to get.
 *   Specified in the format `projects/* /locations/* /operations/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getOperation(request);
 */
  getOperation(
      request?: protos.google.container.v1.IGetOperationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IGetOperationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IGetOperationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IGetOperationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.getOperation(request, options, callback);
  }
  cancelOperation(
      request?: protos.google.container.v1.ICancelOperationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.container.v1.ICancelOperationRequest|undefined, {}|undefined
      ]>;
  cancelOperation(
      request: protos.google.container.v1.ICancelOperationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.container.v1.ICancelOperationRequest|null|undefined,
          {}|null|undefined>): void;
  cancelOperation(
      request: protos.google.container.v1.ICancelOperationRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.container.v1.ICancelOperationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Cancels the specified operation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   operation resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.operationId
 *   Deprecated. The server-assigned `name` of the operation.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.name
 *   The name (project, location, operation id) of the operation to cancel.
 *   Specified in the format `projects/* /locations/* /operations/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.cancelOperation(request);
 */
  cancelOperation(
      request?: protos.google.container.v1.ICancelOperationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.container.v1.ICancelOperationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.container.v1.ICancelOperationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.container.v1.ICancelOperationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.cancelOperation(request, options, callback);
  }
  getServerConfig(
      request?: protos.google.container.v1.IGetServerConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IServerConfig,
        protos.google.container.v1.IGetServerConfigRequest|undefined, {}|undefined
      ]>;
  getServerConfig(
      request: protos.google.container.v1.IGetServerConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IServerConfig,
          protos.google.container.v1.IGetServerConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getServerConfig(
      request: protos.google.container.v1.IGetServerConfigRequest,
      callback: Callback<
          protos.google.container.v1.IServerConfig,
          protos.google.container.v1.IGetServerConfigRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Returns configuration info about the Google Kubernetes Engine service.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) to return
 *   operations for. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.name
 *   The name (project and location) of the server config to get,
 *   specified in the format `projects/* /locations/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ServerConfig]{@link google.container.v1.ServerConfig}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getServerConfig(request);
 */
  getServerConfig(
      request?: protos.google.container.v1.IGetServerConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IServerConfig,
          protos.google.container.v1.IGetServerConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IServerConfig,
          protos.google.container.v1.IGetServerConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IServerConfig,
        protos.google.container.v1.IGetServerConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.getServerConfig(request, options, callback);
  }
  getJSONWebKeys(
      request?: protos.google.container.v1.IGetJSONWebKeysRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IGetJSONWebKeysResponse,
        protos.google.container.v1.IGetJSONWebKeysRequest|undefined, {}|undefined
      ]>;
  getJSONWebKeys(
      request: protos.google.container.v1.IGetJSONWebKeysRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IGetJSONWebKeysResponse,
          protos.google.container.v1.IGetJSONWebKeysRequest|null|undefined,
          {}|null|undefined>): void;
  getJSONWebKeys(
      request: protos.google.container.v1.IGetJSONWebKeysRequest,
      callback: Callback<
          protos.google.container.v1.IGetJSONWebKeysResponse,
          protos.google.container.v1.IGetJSONWebKeysRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets the public component of the cluster signing keys in
 * JSON Web Key format.
 * This API is not yet intended for general use, and is not available for all
 * clusters.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The cluster (project, location, cluster id) to get keys for. Specified in
 *   the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [GetJSONWebKeysResponse]{@link google.container.v1.GetJSONWebKeysResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getJSONWebKeys(request);
 */
  getJSONWebKeys(
      request?: protos.google.container.v1.IGetJSONWebKeysRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IGetJSONWebKeysResponse,
          protos.google.container.v1.IGetJSONWebKeysRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IGetJSONWebKeysResponse,
          protos.google.container.v1.IGetJSONWebKeysRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IGetJSONWebKeysResponse,
        protos.google.container.v1.IGetJSONWebKeysRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.getJSONWebKeys(request, options, callback);
  }
  listNodePools(
      request?: protos.google.container.v1.IListNodePoolsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IListNodePoolsResponse,
        protos.google.container.v1.IListNodePoolsRequest|undefined, {}|undefined
      ]>;
  listNodePools(
      request: protos.google.container.v1.IListNodePoolsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IListNodePoolsResponse,
          protos.google.container.v1.IListNodePoolsRequest|null|undefined,
          {}|null|undefined>): void;
  listNodePools(
      request: protos.google.container.v1.IListNodePoolsRequest,
      callback: Callback<
          protos.google.container.v1.IListNodePoolsResponse,
          protos.google.container.v1.IListNodePoolsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Lists the node pools for a cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://developers.google.com/console/help/new/#projectnumber).
 *   This field has been deprecated and replaced by the parent field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the parent
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster.
 *   This field has been deprecated and replaced by the parent field.
 * @param {string} request.parent
 *   The parent (project, location, cluster id) where the node pools will be
 *   listed. Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListNodePoolsResponse]{@link google.container.v1.ListNodePoolsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.listNodePools(request);
 */
  listNodePools(
      request?: protos.google.container.v1.IListNodePoolsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IListNodePoolsResponse,
          protos.google.container.v1.IListNodePoolsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IListNodePoolsResponse,
          protos.google.container.v1.IListNodePoolsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IListNodePoolsResponse,
        protos.google.container.v1.IListNodePoolsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.listNodePools(request, options, callback);
  }
  getNodePool(
      request?: protos.google.container.v1.IGetNodePoolRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.INodePool,
        protos.google.container.v1.IGetNodePoolRequest|undefined, {}|undefined
      ]>;
  getNodePool(
      request: protos.google.container.v1.IGetNodePoolRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.INodePool,
          protos.google.container.v1.IGetNodePoolRequest|null|undefined,
          {}|null|undefined>): void;
  getNodePool(
      request: protos.google.container.v1.IGetNodePoolRequest,
      callback: Callback<
          protos.google.container.v1.INodePool,
          protos.google.container.v1.IGetNodePoolRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves the requested node pool.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://developers.google.com/console/help/new/#projectnumber).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.nodePoolId
 *   Deprecated. The name of the node pool.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.name
 *   The name (project, location, cluster, node pool id) of the node pool to
 *   get. Specified in the format
 *   `projects/* /locations/* /clusters/* /nodePools/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [NodePool]{@link google.container.v1.NodePool}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getNodePool(request);
 */
  getNodePool(
      request?: protos.google.container.v1.IGetNodePoolRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.INodePool,
          protos.google.container.v1.IGetNodePoolRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.INodePool,
          protos.google.container.v1.IGetNodePoolRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.INodePool,
        protos.google.container.v1.IGetNodePoolRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.getNodePool(request, options, callback);
  }
  createNodePool(
      request?: protos.google.container.v1.ICreateNodePoolRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ICreateNodePoolRequest|undefined, {}|undefined
      ]>;
  createNodePool(
      request: protos.google.container.v1.ICreateNodePoolRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ICreateNodePoolRequest|null|undefined,
          {}|null|undefined>): void;
  createNodePool(
      request: protos.google.container.v1.ICreateNodePoolRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ICreateNodePoolRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a node pool for a cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://developers.google.com/console/help/new/#projectnumber).
 *   This field has been deprecated and replaced by the parent field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the parent
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster.
 *   This field has been deprecated and replaced by the parent field.
 * @param {google.container.v1.NodePool} request.nodePool
 *   Required. The node pool to create.
 * @param {string} request.parent
 *   The parent (project, location, cluster id) where the node pool will be
 *   created. Specified in the format
 *   `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createNodePool(request);
 */
  createNodePool(
      request?: protos.google.container.v1.ICreateNodePoolRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ICreateNodePoolRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ICreateNodePoolRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ICreateNodePoolRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.createNodePool(request, options, callback);
  }
  deleteNodePool(
      request?: protos.google.container.v1.IDeleteNodePoolRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IDeleteNodePoolRequest|undefined, {}|undefined
      ]>;
  deleteNodePool(
      request: protos.google.container.v1.IDeleteNodePoolRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IDeleteNodePoolRequest|null|undefined,
          {}|null|undefined>): void;
  deleteNodePool(
      request: protos.google.container.v1.IDeleteNodePoolRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IDeleteNodePoolRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes a node pool from a cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://developers.google.com/console/help/new/#projectnumber).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.nodePoolId
 *   Deprecated. The name of the node pool to delete.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.name
 *   The name (project, location, cluster, node pool id) of the node pool to
 *   delete. Specified in the format
 *   `projects/* /locations/* /clusters/* /nodePools/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteNodePool(request);
 */
  deleteNodePool(
      request?: protos.google.container.v1.IDeleteNodePoolRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IDeleteNodePoolRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IDeleteNodePoolRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IDeleteNodePoolRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteNodePool(request, options, callback);
  }
  rollbackNodePoolUpgrade(
      request?: protos.google.container.v1.IRollbackNodePoolUpgradeRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IRollbackNodePoolUpgradeRequest|undefined, {}|undefined
      ]>;
  rollbackNodePoolUpgrade(
      request: protos.google.container.v1.IRollbackNodePoolUpgradeRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IRollbackNodePoolUpgradeRequest|null|undefined,
          {}|null|undefined>): void;
  rollbackNodePoolUpgrade(
      request: protos.google.container.v1.IRollbackNodePoolUpgradeRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IRollbackNodePoolUpgradeRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Rolls back a previously Aborted or Failed NodePool upgrade.
 * This makes no changes if the last upgrade successfully completed.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster to rollback.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.nodePoolId
 *   Deprecated. The name of the node pool to rollback.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.name
 *   The name (project, location, cluster, node pool id) of the node poll to
 *   rollback upgrade.
 *   Specified in the format `projects/* /locations/* /clusters/* /nodePools/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.rollbackNodePoolUpgrade(request);
 */
  rollbackNodePoolUpgrade(
      request?: protos.google.container.v1.IRollbackNodePoolUpgradeRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IRollbackNodePoolUpgradeRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IRollbackNodePoolUpgradeRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IRollbackNodePoolUpgradeRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.rollbackNodePoolUpgrade(request, options, callback);
  }
  setNodePoolManagement(
      request?: protos.google.container.v1.ISetNodePoolManagementRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetNodePoolManagementRequest|undefined, {}|undefined
      ]>;
  setNodePoolManagement(
      request: protos.google.container.v1.ISetNodePoolManagementRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNodePoolManagementRequest|null|undefined,
          {}|null|undefined>): void;
  setNodePoolManagement(
      request: protos.google.container.v1.ISetNodePoolManagementRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNodePoolManagementRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Sets the NodeManagement options for a node pool.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster to update.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.nodePoolId
 *   Deprecated. The name of the node pool to update.
 *   This field has been deprecated and replaced by the name field.
 * @param {google.container.v1.NodeManagement} request.management
 *   Required. NodeManagement configuration for the node pool.
 * @param {string} request.name
 *   The name (project, location, cluster, node pool id) of the node pool to set
 *   management properties. Specified in the format
 *   `projects/* /locations/* /clusters/* /nodePools/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.setNodePoolManagement(request);
 */
  setNodePoolManagement(
      request?: protos.google.container.v1.ISetNodePoolManagementRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNodePoolManagementRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNodePoolManagementRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetNodePoolManagementRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.setNodePoolManagement(request, options, callback);
  }
  setLabels(
      request?: protos.google.container.v1.ISetLabelsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetLabelsRequest|undefined, {}|undefined
      ]>;
  setLabels(
      request: protos.google.container.v1.ISetLabelsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLabelsRequest|null|undefined,
          {}|null|undefined>): void;
  setLabels(
      request: protos.google.container.v1.ISetLabelsRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLabelsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Sets labels on a cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://developers.google.com/console/help/new/#projectnumber).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster.
 *   This field has been deprecated and replaced by the name field.
 * @param {number[]} request.resourceLabels
 *   Required. The labels to set for that cluster.
 * @param {string} request.labelFingerprint
 *   Required. The fingerprint of the previous set of labels for this resource,
 *   used to detect conflicts. The fingerprint is initially generated by
 *   Kubernetes Engine and changes after every request to modify or update
 *   labels. You must always provide an up-to-date fingerprint hash when
 *   updating or changing labels. Make a `get()` request to the
 *   resource to get the latest fingerprint.
 * @param {string} request.name
 *   The name (project, location, cluster id) of the cluster to set labels.
 *   Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.setLabels(request);
 */
  setLabels(
      request?: protos.google.container.v1.ISetLabelsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLabelsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLabelsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetLabelsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.setLabels(request, options, callback);
  }
  setLegacyAbac(
      request?: protos.google.container.v1.ISetLegacyAbacRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetLegacyAbacRequest|undefined, {}|undefined
      ]>;
  setLegacyAbac(
      request: protos.google.container.v1.ISetLegacyAbacRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLegacyAbacRequest|null|undefined,
          {}|null|undefined>): void;
  setLegacyAbac(
      request: protos.google.container.v1.ISetLegacyAbacRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLegacyAbacRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Enables or disables the ABAC authorization mechanism on a cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster to update.
 *   This field has been deprecated and replaced by the name field.
 * @param {boolean} request.enabled
 *   Required. Whether ABAC authorization will be enabled in the cluster.
 * @param {string} request.name
 *   The name (project, location, cluster id) of the cluster to set legacy abac.
 *   Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.setLegacyAbac(request);
 */
  setLegacyAbac(
      request?: protos.google.container.v1.ISetLegacyAbacRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLegacyAbacRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetLegacyAbacRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetLegacyAbacRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.setLegacyAbac(request, options, callback);
  }
  startIPRotation(
      request?: protos.google.container.v1.IStartIPRotationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IStartIPRotationRequest|undefined, {}|undefined
      ]>;
  startIPRotation(
      request: protos.google.container.v1.IStartIPRotationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IStartIPRotationRequest|null|undefined,
          {}|null|undefined>): void;
  startIPRotation(
      request: protos.google.container.v1.IStartIPRotationRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IStartIPRotationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Starts master IP rotation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://developers.google.com/console/help/new/#projectnumber).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.name
 *   The name (project, location, cluster id) of the cluster to start IP
 *   rotation. Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {boolean} request.rotateCredentials
 *   Whether to rotate credentials during IP rotation.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.startIPRotation(request);
 */
  startIPRotation(
      request?: protos.google.container.v1.IStartIPRotationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IStartIPRotationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.IStartIPRotationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.IStartIPRotationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.startIPRotation(request, options, callback);
  }
  completeIPRotation(
      request?: protos.google.container.v1.ICompleteIPRotationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ICompleteIPRotationRequest|undefined, {}|undefined
      ]>;
  completeIPRotation(
      request: protos.google.container.v1.ICompleteIPRotationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ICompleteIPRotationRequest|null|undefined,
          {}|null|undefined>): void;
  completeIPRotation(
      request: protos.google.container.v1.ICompleteIPRotationRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ICompleteIPRotationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Completes master IP rotation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://developers.google.com/console/help/new/#projectnumber).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.name
 *   The name (project, location, cluster id) of the cluster to complete IP
 *   rotation. Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.completeIPRotation(request);
 */
  completeIPRotation(
      request?: protos.google.container.v1.ICompleteIPRotationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ICompleteIPRotationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ICompleteIPRotationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ICompleteIPRotationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.completeIPRotation(request, options, callback);
  }
  setNodePoolSize(
      request?: protos.google.container.v1.ISetNodePoolSizeRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetNodePoolSizeRequest|undefined, {}|undefined
      ]>;
  setNodePoolSize(
      request: protos.google.container.v1.ISetNodePoolSizeRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNodePoolSizeRequest|null|undefined,
          {}|null|undefined>): void;
  setNodePoolSize(
      request: protos.google.container.v1.ISetNodePoolSizeRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNodePoolSizeRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Sets the size for a specific node pool.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster to update.
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.nodePoolId
 *   Deprecated. The name of the node pool to update.
 *   This field has been deprecated and replaced by the name field.
 * @param {number} request.nodeCount
 *   Required. The desired node count for the pool.
 * @param {string} request.name
 *   The name (project, location, cluster, node pool id) of the node pool to set
 *   size.
 *   Specified in the format `projects/* /locations/* /clusters/* /nodePools/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.setNodePoolSize(request);
 */
  setNodePoolSize(
      request?: protos.google.container.v1.ISetNodePoolSizeRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNodePoolSizeRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNodePoolSizeRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetNodePoolSizeRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.setNodePoolSize(request, options, callback);
  }
  setNetworkPolicy(
      request?: protos.google.container.v1.ISetNetworkPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetNetworkPolicyRequest|undefined, {}|undefined
      ]>;
  setNetworkPolicy(
      request: protos.google.container.v1.ISetNetworkPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNetworkPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  setNetworkPolicy(
      request: protos.google.container.v1.ISetNetworkPolicyRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNetworkPolicyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Enables or disables Network Policy for a cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Deprecated. The Google Developers Console [project ID or project
 *   number](https://developers.google.com/console/help/new/#projectnumber).
 *   This field has been deprecated and replaced by the name field.
 * @param {string} request.zone
 *   Deprecated. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides. This field has been deprecated and replaced by the name
 *   field.
 * @param {string} request.clusterId
 *   Deprecated. The name of the cluster.
 *   This field has been deprecated and replaced by the name field.
 * @param {google.container.v1.NetworkPolicy} request.networkPolicy
 *   Required. Configuration options for the NetworkPolicy feature.
 * @param {string} request.name
 *   The name (project, location, cluster id) of the cluster to set networking
 *   policy. Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.setNetworkPolicy(request);
 */
  setNetworkPolicy(
      request?: protos.google.container.v1.ISetNetworkPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNetworkPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetNetworkPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetNetworkPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.setNetworkPolicy(request, options, callback);
  }
  setMaintenancePolicy(
      request?: protos.google.container.v1.ISetMaintenancePolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetMaintenancePolicyRequest|undefined, {}|undefined
      ]>;
  setMaintenancePolicy(
      request: protos.google.container.v1.ISetMaintenancePolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetMaintenancePolicyRequest|null|undefined,
          {}|null|undefined>): void;
  setMaintenancePolicy(
      request: protos.google.container.v1.ISetMaintenancePolicyRequest,
      callback: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetMaintenancePolicyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Sets the maintenance policy for a cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. The Google Developers Console [project ID or project
 *   number](https://support.google.com/cloud/answer/6158840).
 * @param {string} request.zone
 *   Required. The name of the Google Compute Engine
 *   [zone](https://cloud.google.com/compute/docs/zones#available) in which the
 *   cluster resides.
 * @param {string} request.clusterId
 *   Required. The name of the cluster to update.
 * @param {google.container.v1.MaintenancePolicy} request.maintenancePolicy
 *   Required. The maintenance policy to be set for the cluster. An empty field
 *   clears the existing maintenance policy.
 * @param {string} request.name
 *   The name (project, location, cluster id) of the cluster to set maintenance
 *   policy.
 *   Specified in the format `projects/* /locations/* /clusters/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.container.v1.Operation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.setMaintenancePolicy(request);
 */
  setMaintenancePolicy(
      request?: protos.google.container.v1.ISetMaintenancePolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetMaintenancePolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.container.v1.IOperation,
          protos.google.container.v1.ISetMaintenancePolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.container.v1.IOperation,
        protos.google.container.v1.ISetMaintenancePolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.setMaintenancePolicy(request, options, callback);
  }

  listUsableSubnetworks(
      request?: protos.google.container.v1.IListUsableSubnetworksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.container.v1.IUsableSubnetwork[],
        protos.google.container.v1.IListUsableSubnetworksRequest|null,
        protos.google.container.v1.IListUsableSubnetworksResponse
      ]>;
  listUsableSubnetworks(
      request: protos.google.container.v1.IListUsableSubnetworksRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.container.v1.IListUsableSubnetworksRequest,
          protos.google.container.v1.IListUsableSubnetworksResponse|null|undefined,
          protos.google.container.v1.IUsableSubnetwork>): void;
  listUsableSubnetworks(
      request: protos.google.container.v1.IListUsableSubnetworksRequest,
      callback: PaginationCallback<
          protos.google.container.v1.IListUsableSubnetworksRequest,
          protos.google.container.v1.IListUsableSubnetworksResponse|null|undefined,
          protos.google.container.v1.IUsableSubnetwork>): void;
/**
 * Lists subnetworks that are usable for creating clusters in a project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent project where subnetworks are usable.
 *   Specified in the format `projects/*`.
 * @param {string} request.filter
 *   Filtering currently only supports equality on the networkProjectId and must
 *   be in the form: "networkProjectId=[PROJECTID]", where `networkProjectId`
 *   is the project which owns the listed subnetworks. This defaults to the
 *   parent project ID.
 * @param {number} request.pageSize
 *   The max number of results per page that should be returned. If the number
 *   of available results is larger than `page_size`, a `next_page_token` is
 *   returned which can be used to get the next page of results in subsequent
 *   requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
 * @param {string} request.pageToken
 *   Specifies a page token to use. Set this to the nextPageToken returned by
 *   previous list requests to get the next page of results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [UsableSubnetwork]{@link google.container.v1.UsableSubnetwork}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listUsableSubnetworksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listUsableSubnetworks(
      request?: protos.google.container.v1.IListUsableSubnetworksRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.container.v1.IListUsableSubnetworksRequest,
          protos.google.container.v1.IListUsableSubnetworksResponse|null|undefined,
          protos.google.container.v1.IUsableSubnetwork>,
      callback?: PaginationCallback<
          protos.google.container.v1.IListUsableSubnetworksRequest,
          protos.google.container.v1.IListUsableSubnetworksResponse|null|undefined,
          protos.google.container.v1.IUsableSubnetwork>):
      Promise<[
        protos.google.container.v1.IUsableSubnetwork[],
        protos.google.container.v1.IListUsableSubnetworksRequest|null,
        protos.google.container.v1.IListUsableSubnetworksResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listUsableSubnetworks(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent project where subnetworks are usable.
 *   Specified in the format `projects/*`.
 * @param {string} request.filter
 *   Filtering currently only supports equality on the networkProjectId and must
 *   be in the form: "networkProjectId=[PROJECTID]", where `networkProjectId`
 *   is the project which owns the listed subnetworks. This defaults to the
 *   parent project ID.
 * @param {number} request.pageSize
 *   The max number of results per page that should be returned. If the number
 *   of available results is larger than `page_size`, a `next_page_token` is
 *   returned which can be used to get the next page of results in subsequent
 *   requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
 * @param {string} request.pageToken
 *   Specifies a page token to use. Set this to the nextPageToken returned by
 *   previous list requests to get the next page of results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [UsableSubnetwork]{@link google.container.v1.UsableSubnetwork} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listUsableSubnetworksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listUsableSubnetworksStream(
      request?: protos.google.container.v1.IListUsableSubnetworksRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listUsableSubnetworks.createStream(
      this.innerApiCalls.listUsableSubnetworks as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listUsableSubnetworks`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent project where subnetworks are usable.
 *   Specified in the format `projects/*`.
 * @param {string} request.filter
 *   Filtering currently only supports equality on the networkProjectId and must
 *   be in the form: "networkProjectId=[PROJECTID]", where `networkProjectId`
 *   is the project which owns the listed subnetworks. This defaults to the
 *   parent project ID.
 * @param {number} request.pageSize
 *   The max number of results per page that should be returned. If the number
 *   of available results is larger than `page_size`, a `next_page_token` is
 *   returned which can be used to get the next page of results in subsequent
 *   requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
 * @param {string} request.pageToken
 *   Specifies a page token to use. Set this to the nextPageToken returned by
 *   previous list requests to get the next page of results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [UsableSubnetwork]{@link google.container.v1.UsableSubnetwork}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listUsableSubnetworksAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listUsableSubnetworksAsync(
      request?: protos.google.container.v1.IListUsableSubnetworksRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.container.v1.IUsableSubnetwork>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listUsableSubnetworks.asyncIterate(
      this.innerApiCalls['listUsableSubnetworks'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.container.v1.IUsableSubnetwork>;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.clusterManagerStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
